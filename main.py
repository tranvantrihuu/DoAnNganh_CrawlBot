#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import time
import signal
import logging
import subprocess
from pathlib import Path
from datetime import datetime
import threading
from typing import Set

from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# ====== ƒê∆Ø·ªúNG D·∫™N ======
ROOT = Path(__file__).resolve().parent
PY = sys.executable  # python hi·ªán t·∫°i (trong venv)
SCRAPER = ROOT / "crawler" / "selenium_scraper.py"
PREPROCESS = ROOT / "processor" / "preprocess.py"
ANALYZER = ROOT / "processor" / "analyzer.py"
OUTPUT_DIR = ROOT / "output"
LOG_DIR = ROOT / "logs"
LOG_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

# ====== LOGGING ======
LOG_FILE = LOG_DIR / "main.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
    ],
)
log = logging.getLogger("main")

# ====== Bi·∫øn kh√≥a tr√°nh ch·∫°y tr√πng ======
_run_lock = threading.Lock()
_running_flag = threading.Event()

# ====== H√ÄM PH·ª§ ======

def run_cmd(cmd: str):
    """Ch·∫°y l·ªánh shell, ghi log ƒë·∫ßy ƒë·ªß (t·ªëi ∆∞u cho Ubuntu)."""
    log.info(f"$ {cmd}")
    try:
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True,
            text=True,
            check=True,
            cwd=str(ROOT),
            env=os.environ.copy(),
        )
        if result.stdout:
            for line in result.stdout.splitlines():
                log.info(line)
        if result.stderr:
            for line in result.stderr.splitlines():
                log.warning(line)
    except subprocess.CalledProcessError as e:
        log.error(f"‚ùå L·ªói khi ch·∫°y l·ªánh: {cmd}")
        if e.stdout:
            for line in e.stdout.splitlines():
                log.error(line)
        if e.stderr:
            for line in e.stderr.splitlines():
                log.error(line)


def list_files_under(root: Path) -> Set[str]:
    return {p.name for p in root.rglob("*") if p.is_file()}
def _kill_process_tree_pgid(pgid: int, gentle_seconds: float = 2.0):
    """Kill c·∫£ group theo PGID: SIGTERM -> ch·ªù -> SIGKILL."""
    try:
        os.killpg(pgid, signal.SIGTERM)
    except ProcessLookupError:
        return
    time.sleep(gentle_seconds)
    try:
        os.killpg(pgid, signal.SIGKILL)
    except ProcessLookupError:
        pass

def _reap_children_by_name(names=("chrome", "chromedriver", "Xvfb")):
    """Di·ªát c√°c ti·∫øn tr√¨nh r∆°i r·ªõt theo t√™n (ph√≤ng h·ªù driver c√≤n s·ªëng)."""
    for p in psutil.process_iter(["name", "cmdline"]):
        try:
            nm = (p.info.get("name") or "").lower()
            cmd = " ".join(p.info.get("cmdline") or []).lower()
            if any(n in nm or n in cmd for n in names):
                p.kill()
        except Exception:
            pass

def run_script(path: Path, name: str, timeout: float | None = None) -> None:
    """
    Ch·∫°y file Python con:
    - Ghi log v√†o file + stream realtime ra terminal
    - T·∫°o process group ƒë·ªÉ kill c·∫£ c√¢y
    - Thu d·ªçn RAM/child processes sau khi xong
    """
    log_path = LOG_DIR / f"{name}_{datetime.now():%Y%m%d_%H%M%S}.log"

    # m√¥i tr∆∞·ªùng unbuffered cho log t·ª©c th·ªùi
    env = os.environ.copy()
    env["PYTHONUNBUFFERED"] = "1"

    with open(log_path, "w", buffering=1) as lf:
        # -u ƒë·ªÉ stdout/stderr kh√¥ng buffer
        proc = subprocess.Popen(
            [PY, "-u", str(path)],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            bufsize=1,
            env=env,
            preexec_fn=os.setsid,  # Linux: t·∫°o process group m·ªõi (PGID = PID)
        )

        # PGID ƒë·ªÉ kill c·∫£ c√¢y sau n√†y
        pgid = os.getpgid(proc.pid)

        try:
            # stream t·ª´ng d√≤ng: terminal + file
            assert proc.stdout is not None
            for line in iter(proc.stdout.readline, ""):
                # hi·ªán tr√™n terminal (orchestrator)
                sys.stdout.write(line)
                # ghi file log
                lf.write(line)
                lf.flush()
            ret = proc.wait(timeout=timeout)
        except subprocess.TimeoutExpired:
            _kill_process_tree_pgid(pgid)
            raise RuntimeError(f"{name} timed out. See log: {log_path}")
        finally:
            # ƒë√≥ng stream s·ªõm ƒë·ªÉ gi·∫£i ph√≥ng FD
            try:
                if proc.stdout:
                    proc.stdout.close()
            except Exception:
                pass

    # Thu d·ªçn ti·∫øn tr√¨nh con c√≤n s√≥t
    try:
        p = psutil.Process(proc.pid)
        for c in p.children(recursive=True):
            try:
                c.kill()
            except Exception:
                pass
    except psutil.NoSuchProcess:
        pass

    # D·ªçn ‚Äúm·ªì c√¥i‚Äù ph·ªï bi·∫øn (chrome/driver)
    _reap_children_by_name()

    # Thu gom r√°c Python
    gc.collect()

    if ret != 0:
        raise RuntimeError(f"{name} exited with code {ret}. See log: {log_path}")
def pipeline():
    """Ch·∫°y pipeline tu·∫ßn t·ª±, c√≥ kh√≥a tr√°nh ch·∫°y tr√πng."""
    if _running_flag.is_set():
        log.warning("Pipeline ƒëang ch·∫°y, b·ªè qua l·∫ßn k√≠ch ho·∫°t n√†y.")
        return

    with _run_lock:
        if _running_flag.is_set():
            log.warning("Pipeline ƒëang ch·∫°y, b·ªè qua.")
            return
        _running_flag.set()

    try:
        log.info("üöÄ B·∫ÆT ƒê·∫¶U PIPELINE")
        run_script(SCRAPER, "selenium_scraper")
        run_script(PREPROCESS, "preprocess")
        run_script(ANALYZER, "analyzer")
        log.info("üéâ PIPELINE HO√ÄN T·∫§T")
    except Exception:
        log.exception("‚ùå PIPELINE TH·∫§T B·∫†I")
    finally:
        _running_flag.clear()

def manage_services():
    run_cmd("sudo systemctl restart fastapi")
    run_cmd("sudo systemctl status nginx --no-pager")
    run_cmd("sudo systemctl status fastapi --no-pager")


# ====== L·∫¨P L·ªäCH ======

def start_scheduler():
    sched = BackgroundScheduler(timezone="Asia/Ho_Chi_Minh")
    # H·∫πn gi·ªù: Th·ª© Ba 00:00
    trigger = CronTrigger(day_of_week="tue", hour=00, minute=00)
    sched.add_job(
        pipeline,
        trigger,
        id="weekly_pipeline",
        coalesce=True,          # g·ªôp n·∫øu b·ªã tr·ªÖ
        max_instances=1,        # tr√°nh ch·∫°y song song
        misfire_grace_time=3600 # cho ph√©p mu·ªôn 1h
    )
    sched.start()
    log.info("‚è∞ Scheduler ƒë√£ b·∫≠t: Th·ª© Ba h√†ng tu·∫ßn l√∫c 00:00 (gi·ªù VN)")
    return sched


# ====== MAIN ======

def main():
    log.info("===== Orchestrator kh·ªüi ƒë·ªông (t3.small) =====")

    # B·∫≠t scheduler
    scheduler = start_scheduler()

    # Ch·∫°y pipeline ngay khi kh·ªüi ƒë·ªông
    t = threading.Thread(target=pipeline, name="initial_pipeline", daemon=True)
    t.start()

    # Qu·∫£n l√Ω d·ªãch v·ª• web song song
    svc = threading.Thread(target=manage_services, name="service_manager", daemon=True)
    svc.start()

    # Gi·ªØ ti·∫øn tr√¨nh ch·∫°y, x·ª≠ l√Ω t√≠n hi·ªáu d·ª´ng
    stop_event = threading.Event()

    def handle_signal(signum, frame):
        log.info(f"Nh·∫≠n t√≠n hi·ªáu {signum}. ƒêang d·ª´ng...")
        stop_event.set()

    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)

    try:
        while not stop_event.is_set():
            time.sleep(0.5)
    finally:
        try:
            scheduler.shutdown(wait=False)
        except Exception:
            pass
        log.info("Orchestrator ƒë√£ d·ª´ng.")


if __name__ == "__main__":
    main()
