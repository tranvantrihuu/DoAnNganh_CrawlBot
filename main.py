#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Tr√¨nh ƒëi·ªÅu ph·ªëi cho Ubuntu (AWS t3.micro):
- Ch·∫°y pipeline tu·∫ßn t·ª± (selenium_scraper.py -> preprocess.py -> analyzer.py)
- Khi start main.py s·∫Ω ch·∫°y ngay m·ªôt l·∫ßn
- ƒê·ªìng th·ªùi h·∫πn gi·ªù ch·∫°y l·∫°i v√†o m·ªói Th·ª© Hai l√∫c 23:59 (gi·ªù Vi·ªát Nam)
- Song song qu·∫£n l√Ω d·ªãch v·ª• web (nginx / fastapi)
- Ghi log chi ti·∫øt, b√°o c√°c file m·ªõi sinh ra
- T·ªëi ∆∞u ƒë·ªÉ tr√°nh qu√° t·∫£i cho t3.micro

Y√™u c·∫ßu:
  pip install apscheduler

Khuy·∫øn ngh·ªã: ch·∫°y file n√†y b·∫±ng systemd service ƒë·ªÉ lu√¥n ho·∫°t ƒë·ªông n·ªÅn.
"""

import os
import sys
import time
import signal
import logging
import subprocess
from pathlib import Path
from datetime import datetime
import threading
from typing import Set

from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger

# ====== ƒê∆Ø·ªúNG D·∫™N ======
ROOT = Path(__file__).resolve().parent
PY = sys.executable  # python hi·ªán t·∫°i (trong venv)
SCRAPER = ROOT / "crawler" / "selenium_scraper.py"
PREPROCESS = ROOT / "processor" / "preprocess.py"
ANALYZER = ROOT / "processor" / "analyzer.py"
OUTPUT_DIR = ROOT / "output"
LOG_DIR = ROOT / "logs"
LOG_DIR.mkdir(parents=True, exist_ok=True)
OUTPUT_DIR.mkdir(parents=True, exist_ok=True)

# ====== LOGGING ======
LOG_FILE = LOG_DIR / "main.log"
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
    ],
)
log = logging.getLogger("main")

# ====== Bi·∫øn kh√≥a tr√°nh ch·∫°y tr√πng ======
_run_lock = threading.Lock()
_running_flag = threading.Event()

# ====== H√ÄM PH·ª§ ======

def run_cmd(cmd: str):
    """Ch·∫°y l·ªánh shell, ghi log ƒë·∫ßy ƒë·ªß (t·ªëi ∆∞u cho Ubuntu)."""
    log.info(f"$ {cmd}")
    try:
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True,
            text=True,
            check=True,
            cwd=str(ROOT),
            env=os.environ.copy(),
        )
        if result.stdout:
            for line in result.stdout.splitlines():
                log.info(line)
        if result.stderr:
            for line in result.stderr.splitlines():
                log.warning(line)
    except subprocess.CalledProcessError as e:
        log.error(f"‚ùå L·ªói khi ch·∫°y l·ªánh: {cmd}")
        if e.stdout:
            for line in e.stdout.splitlines():
                log.error(line)
        if e.stderr:
            for line in e.stderr.splitlines():
                log.error(line)


def list_files_under(root: Path) -> Set[str]:
    return {p.name for p in root.rglob("*") if p.is_file()}

def run_script(path, name, timeout=None):
    log_path = LOG_DIR / f"{name}_{datetime.now():%Y%m%d_%H%M%S}.log"
    with open(log_path, "w") as lf:
        # T·∫°o group cho ph√©p kill c·∫£ c√¢y ti·∫øn tr√¨nh
        proc = subprocess.Popen(
            [PY, str(path)],
            stdout=lf, stderr=lf,
            preexec_fn=os.setsid  # Linux: t√°ch process group
        )
        try:
            ret = proc.wait(timeout=timeout)
        except subprocess.TimeoutExpired:
            os.killpg(proc.pid, signal.SIGTERM)
            time.sleep(2)
            os.killpg(proc.pid, signal.SIGKILL)
            raise RuntimeError(f"{name} timed out. See log: {log_path}")

    # Di·ªát ‚Äúƒëu√¥i‚Äù n·∫øu c√≤n (Chrome/driver)
    try:
        p = psutil.Process(proc.pid)
    except psutil.NoSuchProcess:
        p = None
    if p:
        for child in p.children(recursive=True):
            try: child.kill()
            except Exception: pass

    if ret != 0:
        raise RuntimeError(f"{name} exited with code {ret}. See log: {log_path}")
def pipeline():
    """Ch·∫°y pipeline tu·∫ßn t·ª±, c√≥ kh√≥a tr√°nh ch·∫°y tr√πng."""
    if _running_flag.is_set():
        log.warning("Pipeline ƒëang ch·∫°y, b·ªè qua l·∫ßn k√≠ch ho·∫°t n√†y.")
        return

    with _run_lock:
        if _running_flag.is_set():
            log.warning("Pipeline ƒëang ch·∫°y, b·ªè qua.")
            return
        _running_flag.set()

    try:
        log.info("üöÄ B·∫ÆT ƒê·∫¶U PIPELINE")
        run_script(SCRAPER, "selenium_scraper")
        run_script(PREPROCESS, "preprocess")
        run_script(ANALYZER, "analyzer")
        log.info("üéâ PIPELINE HO√ÄN T·∫§T")
    except Exception:
        log.exception("‚ùå PIPELINE TH·∫§T B·∫†I")
    finally:
        _running_flag.clear()

def manage_services():
    run_cmd("sudo systemctl restart fastapi")
    run_cmd("sudo systemctl status nginx --no-pager")
    run_cmd("sudo systemctl status fastapi --no-pager")


# ====== L·∫¨P L·ªäCH ======

def start_scheduler():
    sched = BackgroundScheduler(timezone="Asia/Ho_Chi_Minh")
    # H·∫πn gi·ªù: Th·ª© Ba 00:00
    trigger = CronTrigger(day_of_week="tue", hour=00, minute=00)
    sched.add_job(
        pipeline,
        trigger,
        id="weekly_pipeline",
        coalesce=True,          # g·ªôp n·∫øu b·ªã tr·ªÖ
        max_instances=1,        # tr√°nh ch·∫°y song song
        misfire_grace_time=3600 # cho ph√©p mu·ªôn 1h
    )
    sched.start()
    log.info("‚è∞ Scheduler ƒë√£ b·∫≠t: Th·ª© Ba h√†ng tu·∫ßn l√∫c 00:00 (gi·ªù VN)")
    return sched


# ====== MAIN ======

def main():
    log.info("===== Orchestrator kh·ªüi ƒë·ªông (t3.small) =====")

    # B·∫≠t scheduler
    scheduler = start_scheduler()

    # Ch·∫°y pipeline ngay khi kh·ªüi ƒë·ªông
    t = threading.Thread(target=pipeline, name="initial_pipeline", daemon=True)
    t.start()

    # Qu·∫£n l√Ω d·ªãch v·ª• web song song
    svc = threading.Thread(target=manage_services, name="service_manager", daemon=True)
    svc.start()

    # Gi·ªØ ti·∫øn tr√¨nh ch·∫°y, x·ª≠ l√Ω t√≠n hi·ªáu d·ª´ng
    stop_event = threading.Event()

    def handle_signal(signum, frame):
        log.info(f"Nh·∫≠n t√≠n hi·ªáu {signum}. ƒêang d·ª´ng...")
        stop_event.set()

    signal.signal(signal.SIGINT, handle_signal)
    signal.signal(signal.SIGTERM, handle_signal)

    try:
        while not stop_event.is_set():
            time.sleep(0.5)
    finally:
        try:
            scheduler.shutdown(wait=False)
        except Exception:
            pass
        log.info("Orchestrator ƒë√£ d·ª´ng.")


if __name__ == "__main__":
    main()
